1. Analyze the changes in this repository since the last commit:
   - Use `git diff` to review changes
   - Identify files that were modified, added, or deleted
   - Note any patterns or themes in the changes

2. Organize and categorize the changes:
   - Group related changes by feature, fix, refactor, etc.
   - For each change, note:
     * What was changed
     * Why it was changed (if apparent from the code)
     * Impact of the change
   - If changes are small, a simple bullet list is sufficient

3. Generate a commit message following conventional commits:
   - Type: feat|fix|docs|style|refactor|test|chore
   - Format: type(scope): concise title
   - Detailed bullet points in the body
   - Reference related issues/PRs if applicable
   - Breaking changes marked with BREAKING CHANGE:

4. Review the proposed commit message:
   - Ensure it's clear and informative
   - Verify all significant changes are mentioned
   - Check conventional commits format
   - Confirm scope is appropriate

5. Execute the commit and push:
   - Stage the appropriate files
   - Commit with the generated message
   - Push to the appropriate branch